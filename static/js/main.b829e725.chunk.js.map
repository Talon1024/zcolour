{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleColorPick","color","colorComponents","parseRgba","colorInt","rgbToInt","colorHex","reduce","s","c","toString","padStart","colorHtml","concat","setState","colorRgb","handleComponentInput","e","compIdx","Number","parseInt","target","dataset","component","compStr","value","comp","Math","max","min","components","state","slice","handleIntInput","intStr","substring","map","x","handleHexInput","lastGoodValue","hexStr","startsWith","length","i","hexChars","includes","_","reduceRight","rgbaStr","split","numStr","parenIndex","search","trim","react_default","a","createElement","className","lib_default","onChange","type","data-component","Component","push","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAIMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA6BRQ,gBAAkB,SAACC,GACjB,IAAMC,EAAkBT,EAAKU,UAAUF,GACjCG,EAAWX,EAAKY,SAASH,GACzBI,EAAWJ,EAAgBK,OAAO,SAACC,EAAEC,GACzC,OAAOD,EAAIC,EAAEC,SAAS,IAAIC,SAAS,EAAG,MACrC,IACGC,EAAS,IAAAC,OAAOP,GACtBb,EAAKqB,SAAS,CACZF,YACAG,SAAUb,EACVE,WACAE,cAzCeb,EA6CnBuB,qBAAuB,SAACC,GACtB,IAAMC,EAAUC,OAAOC,SAASH,EAAEI,OAAOC,QAAQC,UAAW,IACtDC,EAAUP,EAAEI,OAAOI,OAAS,IAC9BC,EAAOP,OAAOC,SAASI,EAAS,IACpCE,EAAOC,KAAKC,IAAID,KAAKE,IAAIH,EAAM,KAAM,GACrC,IAAMI,EAAarC,EAAKsC,MAAMhB,SAASiB,QACvCF,EAAWZ,GAAWQ,EACtB,IAAMtB,EAAWX,EAAKY,SAASyB,GACzBxB,EAAQ,GAAAO,OAAMT,EAASM,SAAS,IAAIC,SAAS,EAAG,MAChDC,EAAS,IAAAC,OAAOP,GACtBb,EAAKqB,SAAS,CACZV,WACAW,SAAUe,EACVlB,YACAN,cA3Deb,EA+DnBwC,eAAiB,SAAChB,GAChB,IAAMiB,EAASjB,EAAEI,OAAOI,OAAS,IAC3BrB,EAAWe,OAAOC,SAASc,EAAQ,IACnC5B,EAAQ,GAAAO,OAAMT,EAASM,SAAS,IAAIC,SAAS,EAAG,MAChDC,EAAS,IAAAC,OAAOT,EAASM,SAAS,IAAIC,SAAS,EAAG,MAClDI,EAAW,CACfT,EAAS6B,UAAU,EAAE,GACrB7B,EAAS6B,UAAU,EAAE,GACrB7B,EAAS6B,UAAU,EAAE,IACrBC,IAAI,SAACC,GAAD,OAAOlB,OAAOC,SAASiB,EAAG,MAChC5C,EAAKqB,SAAS,CACZF,YACAG,WACAX,WACAE,cA7Eeb,EAiFnB6C,eAAiB,SAACrB,GAChB,IAAMsB,EAAgB9C,EAAKsC,MAAMzB,SAC7BkC,EAASvB,EAAEI,OAAOI,MAClBe,EAAOC,WAAW,OACpBD,EAASA,EAAOL,UAAU,IAGxBK,EAAOE,OAAS,EAClBF,EAASD,EACAC,EAAOE,OAAS,IACzBF,EAASA,EAAOL,UAAUK,EAAOE,OAAS,EAAGF,EAAOE,SAItD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IACjC,IAAKpD,EAAIqD,SAASC,SAASL,EAAOG,IAAK,CACrCH,EAASD,EACT,MAIJ,IAAM3B,EAAS,IAAAC,OAAO2B,GAChBV,EAAa,CAAC,EAAE,EAAE,GAAGM,IAAI,SAACU,EAAEH,GAChC,OAAOxB,OAAOC,SAASoB,EAAOL,UAAc,EAAJQ,EAAiB,GAATA,EAAI,IAAS,MAEzDvC,EAAWX,EAAKY,SAASyB,GAC/BrC,EAAKqB,SAAS,CACZF,YACAN,SAAUkC,EACVpC,WACAW,SAAUe,KA7GZrC,EAAKsC,MAAQ,CACXnB,UAAW,UACXG,SAAU,CAAC,EAAE,EAAE,GACfT,SAAU,SACVF,SAAU,GANKX,wEAUVqC,GACP,OAAOA,EAAWiB,YAAY,SAACvC,EAAE6B,EAAEM,GAAL,OAAWnC,EAAK6B,GAAgB,GAAT,EAAIM,uCAGjDK,GACR,GAAIA,EAAQP,WAAW,SAAU,CAC/B,IAAIX,EAAakB,EAAQb,UAAU,GAAGc,MAAM,KAU5C,OATAnB,EAAaA,EAAWM,IAAI,SAACV,GAC3B,IACIwB,EADEC,EAAazB,EAAK0B,OAAO,QAM/B,OAJID,GAAc,IAChBD,EAASxB,EAAKS,UAAU,EAAGgB,IAE7BD,EAASxB,EAAK2B,OACPlC,OAAOC,SAAS8B,EAAQ,OAEflB,MAAM,EAAE,qCA0F5B,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAatD,MAAOL,KAAKmC,MAAMnB,UAAW+C,SAAU/D,KAAKI,kBACzDsD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASD,SAAU/D,KAAKoB,qBAAsBS,MAAO7B,KAAKmC,MAAMhB,SAAS,GAAI0C,UAAU,WAAWI,iBAAgB,KAEhIP,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASD,SAAU/D,KAAKoB,qBAAsBS,MAAO7B,KAAKmC,MAAMhB,SAAS,GAAI0C,UAAU,WAAWI,iBAAgB,KAEhIP,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASD,SAAU/D,KAAKoB,qBAAsBS,MAAO7B,KAAKmC,MAAMhB,SAAS,GAAI0C,UAAU,WAAWI,iBAAgB,MAGlIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASD,SAAU/D,KAAKqC,eAAgBR,MAAO7B,KAAKmC,MAAM3B,SAAUqD,UAAU,cAE5FH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOD,SAAU/D,KAAK0C,eAAgBb,MAAO7B,KAAKmC,MAAMzB,SAAUmD,UAAU,uBA7IlFK,cAqJlBvE,EAAIqD,SAAW,WAEb,IADA,IAAMA,EAAW,GACRD,EAAI,EAAGA,EAAI,GAAIA,IACtBC,EAASmB,KAAKpB,EAAEjC,SAAS,KAE3B,OAAOkC,EALM,GAQArD,QCrJKyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b829e725.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ColorPicker from 'react-simple-colorpicker';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorHtml: \"#000000\",\n      colorRgb: [0,0,0],\n      colorHex: \"000000\",\n      colorInt: 0\n    };\n  }\n\n  rgbToInt(components) {\n    return components.reduceRight((s,x,i) => s | (x << ((2 - i) * 8)));\n  }\n\n  parseRgba(rgbaStr) {\n    if (rgbaStr.startsWith(\"rgba(\")) {\n      let components = rgbaStr.substring(5).split(\",\");\n      components = components.map((comp) => {\n        const parenIndex = comp.search(/[()]/);\n        let numStr;\n        if (parenIndex >= 0) {\n          numStr = comp.substring(0, parenIndex);\n        }\n        numStr = comp.trim();\n        return Number.parseInt(numStr, 10);\n      });\n      return components.slice(0,3);\n    }\n  }\n\n  handleColorPick = (color) => {\n    const colorComponents = this.parseRgba(color);\n    const colorInt = this.rgbToInt(colorComponents);\n    const colorHex = colorComponents.reduce((s,c) => {\n      return s + c.toString(16).padStart(2, \"0\");\n    }, \"\");\n    const colorHtml = `#${colorHex}`;\n    this.setState({\n      colorHtml,\n      colorRgb: colorComponents,\n      colorInt,\n      colorHex\n    });\n  }\n\n  handleComponentInput = (e) => {\n    const compIdx = Number.parseInt(e.target.dataset.component, 10);\n    const compStr = e.target.value || \"0\";\n    let comp = Number.parseInt(compStr, 10);\n    comp = Math.max(Math.min(comp, 255), 0);\n    const components = this.state.colorRgb.slice();\n    components[compIdx] = comp;\n    const colorInt = this.rgbToInt(components);\n    const colorHex = `${colorInt.toString(16).padStart(6, \"0\")}`;\n    const colorHtml = `#${colorHex}`;\n    this.setState({\n      colorInt,\n      colorRgb: components,\n      colorHtml,\n      colorHex\n    });\n  }\n\n  handleIntInput = (e) => {\n    const intStr = e.target.value || \"0\";\n    const colorInt = Number.parseInt(intStr, 10);\n    const colorHex = `${colorInt.toString(16).padStart(6, \"0\")}`;\n    const colorHtml = `#${colorInt.toString(16).padStart(6, \"0\")}`;\n    const colorRgb = [\n      colorHex.substring(0,2),\n      colorHex.substring(2,4),\n      colorHex.substring(4,6)\n    ].map((x) => Number.parseInt(x, 16));\n    this.setState({\n      colorHtml,\n      colorRgb,\n      colorInt,\n      colorHex\n    });\n  }\n\n  handleHexInput = (e) => {\n    const lastGoodValue = this.state.colorHex;\n    let hexStr = e.target.value;\n    if (hexStr.startsWith(\"#\")) {\n      hexStr = hexStr.substring(1);\n    }\n\n    if (hexStr.length < 6) {\n      hexStr = lastGoodValue;\n    } else if (hexStr.length > 6) {\n      hexStr = hexStr.substring(hexStr.length - 6, hexStr.length);\n    }\n\n    // Ensure there is always a valid value\n    for (var i = 0; i < hexStr.length; i++) {\n      if (!App.hexChars.includes(hexStr[i])) {\n        hexStr = lastGoodValue;\n        break;\n      }\n    }\n\n    const colorHtml = `#${hexStr}`;\n    const components = [0,0,0].map((_,i) => {\n      return Number.parseInt(hexStr.substring(i * 2, (i + 1) * 2), 16);\n    });\n    const colorInt = this.rgbToInt(components);\n    this.setState({\n      colorHtml,\n      colorHex: hexStr,\n      colorInt,\n      colorRgb: components\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ColorPicker color={this.state.colorHtml} onChange={this.handleColorPick} />\n        <div className=\"rgbInputs\">\n          <label>\n            <p>Red</p>\n            <input type=\"number\" onChange={this.handleComponentInput} value={this.state.colorRgb[0]} className=\"bigInput\" data-component={0}/>\n          </label>\n          <label>\n            <p>Green</p>\n            <input type=\"number\" onChange={this.handleComponentInput} value={this.state.colorRgb[1]} className=\"bigInput\" data-component={1}/>\n          </label>\n          <label>\n            <p>Blue</p>\n            <input type=\"number\" onChange={this.handleComponentInput} value={this.state.colorRgb[2]} className=\"bigInput\" data-component={2}/>\n          </label>\n        </div>\n        <div className=\"rgbInputs\">\n          <label>\n            <p>Colour as integer</p>\n            <input type=\"number\" onChange={this.handleIntInput} value={this.state.colorInt} className=\"bigInput\" />\n          </label>\n          <label>\n            <p>Colour as hexadecimal value</p>\n            <input type=\"text\" onChange={this.handleHexInput} value={this.state.colorHex} className=\"bigInput\" />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.hexChars = function() {\n  const hexChars = [];\n  for (var i = 0; i < 16; i++) {\n    hexChars.push(i.toString(16));\n  }\n  return hexChars;\n}();\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}